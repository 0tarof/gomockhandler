// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockuser is a mock of user interface.
type Mockuser struct {
	ctrl     *gomock.Controller
	recorder *MockuserMockRecorder
}

// MockuserMockRecorder is the mock recorder for Mockuser.
type MockuserMockRecorder struct {
	mock *Mockuser
}

// NewMockuser creates a new mock instance.
func NewMockuser(ctrl *gomock.Controller) *Mockuser {
	mock := &Mockuser{ctrl: ctrl}
	mock.recorder = &MockuserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockuser) EXPECT() *MockuserMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *Mockuser) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockuserMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Mockuser)(nil).String))
}

// String2 mocks base method.
func (m *Mockuser) String2() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String2")
	ret0, _ := ret[0].(string)
	return ret0
}

// String2 indicates an expected call of String2.
func (mr *MockuserMockRecorder) String2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String2", reflect.TypeOf((*Mockuser)(nil).String2))
}
